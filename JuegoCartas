<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlackJack</title>
    <script src="https://cdn.jsdelivr.net/npm/underscore@1.13.6/underscore-umd-min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="assets/css/style.css">


</head>

<body>
    <header class="titulo">
        Juego de Cartas
    </header>

    <div class=" row mt-2">
        <div id="idBotones" class=" col text-center">

            <button id="btnNuevoJuego" class="btn btn-danger">Nuevo Juego</button>
            <button id="btnPedirCarta" class="btn btn-primary">Pedir Carta</button>
            <button id="btnDetener" class="btn btn-primary">Detener</button>


        </div>


    </div>

    <div class=" row container">

        <div class=" col">
            <h1>Jugador 1- <small>0</small></h1>

        </div>

        <div id="jugadorCartas">
            <!-- FILEPATH: /c:/Users/JOEL/Desktop/js/seccion2/index.html -->
            <!-- 
                This code represents an HTML image element.
                It displays an image with the source "assets/cartas/2S.png".
                The "alt" attribute is empty, indicating that no alternative text is provided for the image.
                The "class" attribute is set to "carta", which can be used for styling or JavaScript manipulation.
            -->
            <!--img src="assets/cartas/2S.png" alt="" class="carta"-->


        </div>

    </div>

    <div class=" row container">

        <div class=" col">
            <h1>Computadora 1- <small>0</small></h1>

        </div>

        <div id="computadoraCartas">
            <!--img src="assets/cartas/2S.png" alt="" class="carta"-->


        </div>

    </div>


    <script src="assets/js/juego.js"></script>

</body>

</html>


// Aqui esta el CSS

html, body {
    margin: 0;
    padding: 0;
    background-color: rgb(0, 109, 73);
    color: aliceblue;
}

.titulo {
    text-align: center;
    background-color: black;
    color: aliceblue;
    font-size: 25px;
    padding: 25px;
}

#jugadorCartas, #computadoraCartas {
    height: 250px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
}

.carta {
    position: relative;
    width: 150px;
    margin-left: -50.5px; /* 25% de 150px */
}

.carta:first-child {
    margin-left: 0; /* La primera carta no debe tener margen negativo */
}

/* Estilos para las cartas


// Aca esta el JS


(() => {
    'use strict';





    let deck = [];
    const tipos = ['C', 'D', 'H', 'S'];
    const especiales = ['A', 'J', 'Q', 'K'];
    let puntosJugador = 0,
        puntosComputadora = 0;

    //referencias al HTML

    const btnPedirCarta = document.querySelector('#btnPedirCarta');
    const btnDetener = document.querySelector('#btnDetener');

    const btnNuevoJuego = document.querySelector('#btnNuevoJuego');

    const smalls = document.querySelectorAll('small');

    const divCartasJugador = document.querySelector('#jugadorCartas');
    const divCartasComputadora = document.querySelector('#computadoraCartas');


    const crearDeck = () => {
        deck = []; // Aseg√∫rate de reiniciar el mazo cada vez que llamas a crearDeck
        for (let i = 2; i <= 10; i++) {
            for (let tipo of tipos) {
                deck.push(i + tipo);
            }
        }

        for (let esp of especiales) {
            for (let tipo of tipos) {
                deck.push(esp + tipo);
            }
        }
        console.log(deck);
        deck = _.shuffle(deck);

        // Ordena aleatoriamente los cartones del mazo
        console.log(deck);
        return deck;
    };

    crearDeck();

    const pedirCarta = () => {
        if (deck.length === 0) {
            throw 'No hay cartas en el deck';
        }

        const carta = deck.pop();
        console.log(deck);
        console.log(carta);
        return carta;
    };

    pedirCarta();

    const valorCarta = (carta) => {
        if (carta === 'A') {
            return 11;
        }
        const valor = carta.substring(0, carta.length - 1);
        return isNaN(valor) ? 10 : valor * 1;
    }

    // Turno de la computadora

    const turnoComputadora = (puntosMinimos) => {
        do {
            const carta = pedirCarta();
            puntosComputadora = puntosComputadora + valorCarta(carta);
            smalls[1].innerText = puntosComputadora;
            const imgCarta = document.createElement('img');
            imgCarta.src = `assets/cartas/${carta}.png`;
            imgCarta.classList.add('carta');
            divCartasComputadora.append(imgCarta);

            if (puntosMinimos > 21) {
                break;
            }
        } while ((puntosComputadora < puntosMinimos) && (puntosMinimos <= 21));

        setTimeout(() => {
            if (puntosComputadora === puntosMinimos) {
                alert('Nadie gana');
            } else if (puntosMinimos > 21) {
                alert('Computadora gana');
            } else if (puntosComputadora > 21) {
                alert('Jugador gana');
            } else {
                alert('Computadora gana');
            }
        }, 100);
    }

    const valor = valorCarta('4S');
    console.log({ valor });


    document.querySelector(".titulo").innerHTML = "Mi propio Juego";


    //eventos
    btnPedirCarta.addEventListener('click', () => {
        const carta = pedirCarta();
        console.log(carta);
        console.log(valorCarta(carta));
        console.log("click en pedir carta")
        puntosJugador = puntosJugador + valorCarta(carta);
        console.log({ puntosJugador });
        console.log(puntosJugador);
        document.querySelectorAll('small')[0].innerText = puntosJugador;
        const imgCarta = document.createElement('img');
        imgCarta.src = `assets/cartas/${carta}.png`;
        divCartasJugador.append(imgCarta);
        imgCarta.classList.add('carta');

        if (puntosJugador > 21) {
            console.warn('Perdiste');
            btnPedirCarta.disabled = true;
            btnDetener.disabled = true;
            turnoComputadora(puntosJugador);
        } else if (puntosJugador === 21) {
            console.warn('21, genial');
            btnPedirCarta.disabled = true;
            btnDetener.disabled = true;
            turnoComputadora(puntosJugador);
        }
        else if (puntosJugador >= 15 && puntosJugador < 21) {
            console.warn('Cuidado estas cerca de 21');
            alert('Cuidado estas cerca de 21');

            turnoComputadora(puntosJugador);

        }
    });


    btnDetener.addEventListener('click', () => {
        btnPedirCarta.disabled = true;
        btnDetener.disabled = true;
        turnoComputadora(puntosJugador);
    });


    btnNuevoJuego.addEventListener('click', () => {
        console.clear();
        deck = [];
        deck = crearDeck();
        puntosJugador = 0;
        puntosComputadora = 0;
        smalls[0].innerText = 0;
        smalls[1].innerText = 0;
        divCartasComputadora.innerHTML = '';
        divCartasJugador.innerHTML = '';
        btnPedirCarta.disabled = false;
        btnDetener.disabled = false;
    });

})();
